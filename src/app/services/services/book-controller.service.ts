/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import {HttpClient, HttpContext} from '@angular/common/http';
import {Injectable} from '@angular/core';
import {Observable} from 'rxjs';
import {map} from 'rxjs/operators';

import {BaseService} from '../base-service';
import {ApiConfiguration} from '../api-configuration';
import {StrictHttpResponse} from '../strict-http-response';

import {BookDto} from '../models/book-dto';
import {deleteBook, DeleteBook$Params} from '../fn/book-controller/delete-book';
import {getAllBooks, GetAllBooks$Params} from '../fn/book-controller/get-all-books';
import {getBookByAny, GetBookByAny$Params} from '../fn/book-controller/get-book-by-any';
import {getBookByPubEdiEntry, GetBookByPubEdiEntry$Params} from '../fn/book-controller/get-book-by-pub-edi-entry';
import {saveBook, SaveBook$Params} from '../fn/book-controller/save-book';
import {updateBook, UpdateBook$Params} from '../fn/book-controller/update-book';

@Injectable({providedIn: 'root'})
export class BookControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `saveBook()` */
  static readonly SaveBookPath = '/api/books/new';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `saveBook()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  saveBook$Response(params: SaveBook$Params, context?: HttpContext): Observable<StrictHttpResponse<BookDto>> {
    return saveBook(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `saveBook$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  saveBook(params: SaveBook$Params, context?: HttpContext): Observable<BookDto> {
    return this.saveBook$Response(params, context).pipe(
      map((r: StrictHttpResponse<BookDto>): BookDto => r.body)
    );
  }

  /** Path part for operation `updateBook()` */
  static readonly UpdateBookPath = '/api/books/edit/{bookId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateBook()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateBook$Response(params: UpdateBook$Params, context?: HttpContext): Observable<StrictHttpResponse<BookDto>> {
    return updateBook(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateBook$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateBook(params: UpdateBook$Params, context?: HttpContext): Observable<BookDto> {
    return this.updateBook$Response(params, context).pipe(
      map((r: StrictHttpResponse<BookDto>): BookDto => r.body)
    );
  }

  /** Path part for operation `getAllBooks()` */
  static readonly GetAllBooksPath = '/api/books/search';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllBooks()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllBooks$Response(params?: GetAllBooks$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<BookDto>>> {
    return getAllBooks(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllBooks$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllBooks(params?: GetAllBooks$Params, context?: HttpContext): Observable<Array<BookDto>> {
    return this.getAllBooks$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<BookDto>>): Array<BookDto> => r.body)
    );
  }

  /** Path part for operation `getBookByPubEdiEntry()` */
  static readonly GetBookByPubEdiEntryPath = '/api/books/search/for';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getBookByPubEdiEntry()` instead.
   *
   * This method doesn't expect any request body.
   */
  getBookByPubEdiEntry$Response(params: GetBookByPubEdiEntry$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<BookDto>>> {
    return getBookByPubEdiEntry(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getBookByPubEdiEntry$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getBookByPubEdiEntry(params: GetBookByPubEdiEntry$Params, context?: HttpContext): Observable<Array<BookDto>> {
    return this.getBookByPubEdiEntry$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<BookDto>>): Array<BookDto> => r.body)
    );
  }

  /** Path part for operation `getBookByAny()` */
  static readonly GetBookByAnyPath = '/api/books/search/by';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getBookByAny()` instead.
   *
   * This method doesn't expect any request body.
   */
  getBookByAny$Response(params?: GetBookByAny$Params, context?: HttpContext): Observable<StrictHttpResponse<{}>> {
    return getBookByAny(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getBookByAny$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getBookByAny(params?: GetBookByAny$Params, context?: HttpContext): Observable<{}> {
    return this.getBookByAny$Response(params, context).pipe(
      map((r: StrictHttpResponse<{}>): {} => r.body)
    );
  }

  /** Path part for operation `deleteBook()` */
  static readonly DeleteBookPath = '/api/books/delete/{bookId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteBook()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteBook$Response(params: DeleteBook$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return deleteBook(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteBook$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteBook(params: DeleteBook$Params, context?: HttpContext): Observable<void> {
    return this.deleteBook$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

}
