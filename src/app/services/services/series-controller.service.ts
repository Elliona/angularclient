/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import {HttpClient, HttpContext} from '@angular/common/http';
import {Injectable} from '@angular/core';
import {Observable} from 'rxjs';
import {map} from 'rxjs/operators';

import {BaseService} from '../base-service';
import {ApiConfiguration} from '../api-configuration';
import {StrictHttpResponse} from '../strict-http-response';

import {addSeries, AddSeries$Params} from '../fn/series-controller/add-series';
import {deleteSeries, DeleteSeries$Params} from '../fn/series-controller/delete-series';
import {getAllSeries, GetAllSeries$Params} from '../fn/series-controller/get-all-series';
import {getSeries, GetSeries$Params} from '../fn/series-controller/get-series';
import {SeriesDto} from '../models/series-dto';
import {updateSeries, UpdateSeries$Params} from '../fn/series-controller/update-series';

@Injectable({providedIn: 'root'})
export class SeriesControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `addSeries()` */
  static readonly AddSeriesPath = '/api/series/new';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `addSeries()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  addSeries$Response(params: AddSeries$Params, context?: HttpContext): Observable<StrictHttpResponse<SeriesDto>> {
    return addSeries(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `addSeries$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  addSeries(params: AddSeries$Params, context?: HttpContext): Observable<SeriesDto> {
    return this.addSeries$Response(params, context).pipe(
      map((r: StrictHttpResponse<SeriesDto>): SeriesDto => r.body)
    );
  }

  /** Path part for operation `updateSeries()` */
  static readonly UpdateSeriesPath = '/api/series/edit/{seriesId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateSeries()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateSeries$Response(params: UpdateSeries$Params, context?: HttpContext): Observable<StrictHttpResponse<SeriesDto>> {
    return updateSeries(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateSeries$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateSeries(params: UpdateSeries$Params, context?: HttpContext): Observable<SeriesDto> {
    return this.updateSeries$Response(params, context).pipe(
      map((r: StrictHttpResponse<SeriesDto>): SeriesDto => r.body)
    );
  }

  /** Path part for operation `getAllSeries()` */
  static readonly GetAllSeriesPath = '/api/series/search';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllSeries()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllSeries$Response(params?: GetAllSeries$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<SeriesDto>>> {
    return getAllSeries(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllSeries$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllSeries(params?: GetAllSeries$Params, context?: HttpContext): Observable<Array<SeriesDto>> {
    return this.getAllSeries$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<SeriesDto>>): Array<SeriesDto> => r.body)
    );
  }

  /** Path part for operation `getSeries()` */
  static readonly GetSeriesPath = '/api/series/search/{seriesId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getSeries()` instead.
   *
   * This method doesn't expect any request body.
   */
  getSeries$Response(params: GetSeries$Params, context?: HttpContext): Observable<StrictHttpResponse<SeriesDto>> {
    return getSeries(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getSeries$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getSeries(params: GetSeries$Params, context?: HttpContext): Observable<SeriesDto> {
    return this.getSeries$Response(params, context).pipe(
      map((r: StrictHttpResponse<SeriesDto>): SeriesDto => r.body)
    );
  }

  /** Path part for operation `deleteSeries()` */
  static readonly DeleteSeriesPath = '/api/series/delete/{seriesId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteSeries()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteSeries$Response(params: DeleteSeries$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return deleteSeries(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteSeries$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteSeries(params: DeleteSeries$Params, context?: HttpContext): Observable<void> {
    return this.deleteSeries$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

}
