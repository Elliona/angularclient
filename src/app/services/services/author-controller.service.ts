/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { AuthorDto } from '../models/author-dto';
import { deleteAuthor } from '../fn/author-controller/delete-author';
import { DeleteAuthor$Params } from '../fn/author-controller/delete-author';
import { getAllAuthors } from '../fn/author-controller/get-all-authors';
import { GetAllAuthors$Params } from '../fn/author-controller/get-all-authors';
import { getAuthorById } from '../fn/author-controller/get-author-by-id';
import { GetAuthorById$Params } from '../fn/author-controller/get-author-by-id';
import { saveAuthor } from '../fn/author-controller/save-author';
import { SaveAuthor$Params } from '../fn/author-controller/save-author';
import { updateAuthor } from '../fn/author-controller/update-author';
import { UpdateAuthor$Params } from '../fn/author-controller/update-author';

@Injectable({ providedIn: 'root' })
export class AuthorControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `saveAuthor()` */
  static readonly SaveAuthorPath = '/api/authors/new';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `saveAuthor()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  saveAuthor$Response(params: SaveAuthor$Params, context?: HttpContext): Observable<StrictHttpResponse<AuthorDto>> {
    return saveAuthor(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `saveAuthor$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  saveAuthor(params: SaveAuthor$Params, context?: HttpContext): Observable<AuthorDto> {
    return this.saveAuthor$Response(params, context).pipe(
      map((r: StrictHttpResponse<AuthorDto>): AuthorDto => r.body)
    );
  }

  /** Path part for operation `updateAuthor()` */
  static readonly UpdateAuthorPath = '/api/authors/edit/{authorID}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateAuthor()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateAuthor$Response(params: UpdateAuthor$Params, context?: HttpContext): Observable<StrictHttpResponse<AuthorDto>> {
    return updateAuthor(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateAuthor$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateAuthor(params: UpdateAuthor$Params, context?: HttpContext): Observable<AuthorDto> {
    return this.updateAuthor$Response(params, context).pipe(
      map((r: StrictHttpResponse<AuthorDto>): AuthorDto => r.body)
    );
  }

  /** Path part for operation `getAllAuthors()` */
  static readonly GetAllAuthorsPath = '/api/authors/search';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllAuthors()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllAuthors$Response(params?: GetAllAuthors$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<AuthorDto>>> {
    return getAllAuthors(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllAuthors$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllAuthors(params?: GetAllAuthors$Params, context?: HttpContext): Observable<Array<AuthorDto>> {
    return this.getAllAuthors$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<AuthorDto>>): Array<AuthorDto> => r.body)
    );
  }

  /** Path part for operation `getAuthorById()` */
  static readonly GetAuthorByIdPath = '/api/authors/search/{authorId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAuthorById()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAuthorById$Response(params: GetAuthorById$Params, context?: HttpContext): Observable<StrictHttpResponse<AuthorDto>> {
    return getAuthorById(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAuthorById$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAuthorById(params: GetAuthorById$Params, context?: HttpContext): Observable<AuthorDto> {
    return this.getAuthorById$Response(params, context).pipe(
      map((r: StrictHttpResponse<AuthorDto>): AuthorDto => r.body)
    );
  }

  /** Path part for operation `deleteAuthor()` */
  static readonly DeleteAuthorPath = '/api/authors/delete/{authorId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteAuthor()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteAuthor$Response(params: DeleteAuthor$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return deleteAuthor(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteAuthor$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteAuthor(params: DeleteAuthor$Params, context?: HttpContext): Observable<void> {
    return this.deleteAuthor$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

}
