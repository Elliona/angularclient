/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import {HttpClient, HttpContext} from '@angular/common/http';
import {Injectable} from '@angular/core';
import {Observable} from 'rxjs';
import {map} from 'rxjs/operators';

import {BaseService} from '../base-service';
import {ApiConfiguration} from '../api-configuration';
import {StrictHttpResponse} from '../strict-http-response';

import {deletePublisher, DeletePublisher$Params} from '../fn/publisher-controller/delete-publisher';
import {getAllPublishers, GetAllPublishers$Params} from '../fn/publisher-controller/get-all-publishers';
import {getPublisherById, GetPublisherById$Params} from '../fn/publisher-controller/get-publisher-by-id';
import {PublisherDto} from '../models/publisher-dto';
import {savePublisher, SavePublisher$Params} from '../fn/publisher-controller/save-publisher';
import {updatePublisher, UpdatePublisher$Params} from '../fn/publisher-controller/update-publisher';

@Injectable({providedIn: 'root'})
export class PublisherControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `savePublisher()` */
  static readonly SavePublisherPath = '/api/publisher/new';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `savePublisher()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  savePublisher$Response(params: SavePublisher$Params, context?: HttpContext): Observable<StrictHttpResponse<PublisherDto>> {
    return savePublisher(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `savePublisher$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  savePublisher(params: SavePublisher$Params, context?: HttpContext): Observable<PublisherDto> {
    return this.savePublisher$Response(params, context).pipe(
      map((r: StrictHttpResponse<PublisherDto>): PublisherDto => r.body)
    );
  }

  /** Path part for operation `updatePublisher()` */
  static readonly UpdatePublisherPath = '/api/publisher/edit/{publisherId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updatePublisher()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updatePublisher$Response(params: UpdatePublisher$Params, context?: HttpContext): Observable<StrictHttpResponse<PublisherDto>> {
    return updatePublisher(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updatePublisher$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updatePublisher(params: UpdatePublisher$Params, context?: HttpContext): Observable<PublisherDto> {
    return this.updatePublisher$Response(params, context).pipe(
      map((r: StrictHttpResponse<PublisherDto>): PublisherDto => r.body)
    );
  }

  /** Path part for operation `getAllPublishers()` */
  static readonly GetAllPublishersPath = '/api/publisher/search';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllPublishers()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllPublishers$Response(params?: GetAllPublishers$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<PublisherDto>>> {
    return getAllPublishers(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllPublishers$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllPublishers(params?: GetAllPublishers$Params, context?: HttpContext): Observable<Array<PublisherDto>> {
    return this.getAllPublishers$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<PublisherDto>>): Array<PublisherDto> => r.body)
    );
  }

  /** Path part for operation `getPublisherById()` */
  static readonly GetPublisherByIdPath = '/api/publisher/search/{publisherId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getPublisherById()` instead.
   *
   * This method doesn't expect any request body.
   */
  getPublisherById$Response(params: GetPublisherById$Params, context?: HttpContext): Observable<StrictHttpResponse<PublisherDto>> {
    return getPublisherById(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getPublisherById$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getPublisherById(params: GetPublisherById$Params, context?: HttpContext): Observable<PublisherDto> {
    return this.getPublisherById$Response(params, context).pipe(
      map((r: StrictHttpResponse<PublisherDto>): PublisherDto => r.body)
    );
  }

  /** Path part for operation `deletePublisher()` */
  static readonly DeletePublisherPath = '/api/publisher/delete/{publisherId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deletePublisher()` instead.
   *
   * This method doesn't expect any request body.
   */
  deletePublisher$Response(params: DeletePublisher$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return deletePublisher(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deletePublisher$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deletePublisher(params: DeletePublisher$Params, context?: HttpContext): Observable<void> {
    return this.deletePublisher$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

}
